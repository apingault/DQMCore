  /// \file DQMGenericEvent.cc
/*
 *
 * DQMGenericEvent.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/DQMGenericEvent.h"
#include "dqm4hep/DQMStreamingHelper.h"
#include "dqm4hep/DQMPlugin.h"

namespace dqm4hep
{

DQM_PLUGIN_DECL( DQMGenericEventStreamer , "GenericEventStreamer" )

DQMGenericEvent::DQMGenericEvent() :
		m_eventNumber(0),
		m_runNumber(0),
		m_timeStamp(0)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMGenericEvent::DQMGenericEvent(int eventNumber) :
		m_eventNumber(eventNumber),
		m_runNumber(0),
		m_timeStamp(0)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMGenericEvent::DQMGenericEvent(int runNumber, int eventNumber) :
		m_eventNumber(eventNumber),
		m_runNumber(runNumber),
		m_timeStamp(0)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMGenericEvent::~DQMGenericEvent()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

void DQMGenericEvent::setEventNumber(int eventNumber)
{
	m_eventNumber = eventNumber;
}

//-------------------------------------------------------------------------------------------------

int DQMGenericEvent::getEventNumber() const
{
	return m_eventNumber;
}

//-------------------------------------------------------------------------------------------------

void DQMGenericEvent::setRunNumber(int runNumber)
{
	m_runNumber = runNumber;
}

//-------------------------------------------------------------------------------------------------

int DQMGenericEvent::getRunNumber() const
{
	return m_runNumber;
}

//-------------------------------------------------------------------------------------------------

void DQMGenericEvent::setTimeStamp(int64_t timeStamp)
{
	m_timeStamp = timeStamp;
}

//-------------------------------------------------------------------------------------------------

int64_t DQMGenericEvent::getTimeStamp() const
{
	return m_timeStamp;
}

//-------------------------------------------------------------------------------------------------

void DQMGenericEvent::setDetectorName(const std::string &detectorName)
{
	m_detectorName = detectorName;
}

//-------------------------------------------------------------------------------------------------

const std::string &DQMGenericEvent::getDetectorName() const
{
	return m_detectorName;
}

//-------------------------------------------------------------------------------------------------

void DQMGenericEvent::setDescription(const std::string &description)
{
	m_description = description;
}

//-------------------------------------------------------------------------------------------------

const std::string &DQMGenericEvent::getDescription() const
{
	return m_description;
}

//-------------------------------------------------------------------------------------------------

template <>
StatusCode DQMGenericEvent::setValues(const std::string &key, const IntVector &vals)
{
	return this->setValuesPrivate(key, m_intValues, vals);
}

//-------------------------------------------------------------------------------------------------

template <>
StatusCode DQMGenericEvent::setValues(const std::string &key, const FloatVector &vals)
{
	return this->setValuesPrivate(key, m_floatValues, vals);
}

//-------------------------------------------------------------------------------------------------

template <>
StatusCode DQMGenericEvent::setValues(const std::string &key, const DoubleVector &vals)
{
	return this->setValuesPrivate(key, m_doubleValues, vals);
}

//-------------------------------------------------------------------------------------------------

template <>
StatusCode DQMGenericEvent::setValues(const std::string &key, const StringVector &vals)
{
	return this->setValuesPrivate(key, m_stringValues, vals);
}

//-------------------------------------------------------------------------------------------------

template <>
StatusCode DQMGenericEvent::getValues(const std::string &key, IntVector &vals) const
{
	return this->getValuesPrivate(key, m_intValues, vals);
}

//-------------------------------------------------------------------------------------------------

template <>
StatusCode DQMGenericEvent::getValues(const std::string &key, FloatVector &vals) const
{
	return this->getValuesPrivate(key, m_floatValues, vals);
}

//-------------------------------------------------------------------------------------------------

template <>
StatusCode DQMGenericEvent::getValues(const std::string &key, DoubleVector &vals) const
{
	return this->getValuesPrivate(key, m_doubleValues, vals);
}

//-------------------------------------------------------------------------------------------------

template <>
StatusCode DQMGenericEvent::getValues(const std::string &key, StringVector &vals) const
{
	return this->getValuesPrivate(key, m_stringValues, vals);
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

DQMGenericEventBase::DQMGenericEventBase() :
		m_pGenericEvent(0)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMGenericEventBase::~DQMGenericEventBase()
{
	this->clear();
}

//-------------------------------------------------------------------------------------------------

DQMGenericEvent *DQMGenericEventBase::getEvent() const
{
	return m_pGenericEvent;
}

//-------------------------------------------------------------------------------------------------

void DQMGenericEventBase::setEvent(DQMGenericEvent *pGenericEvent)
{
	this->clear();
	m_pGenericEvent = pGenericEvent;
}

//-------------------------------------------------------------------------------------------------

void DQMGenericEventBase::clear()
{
	if(0 != m_pGenericEvent && this->isOwner())
		delete m_pGenericEvent;

	m_pGenericEvent = NULL;
}

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

DQMGenericEventStreamer::DQMGenericEventStreamer()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMGenericEventStreamer::~DQMGenericEventStreamer()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

DQMEvent *DQMGenericEventStreamer::createEvent() const
{
	DQMGenericEventBase *pEventBase = new DQMGenericEventBase();
	pEventBase->setEvent(new DQMGenericEvent());

	return pEventBase;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMGenericEventStreamer::write(const DQMEvent *const pEvent, xdrstream::IODevice *pDevice)
{
	const DQMGenericEvent *pGenericEvent = pEvent->getEvent<DQMGenericEvent>();

	if(NULL == pGenericEvent)
		return STATUS_CODE_INVALID_PARAMETER;

	// write event info
	if( ! XDR_TESTBIT( pDevice->write<int32_t>( & pGenericEvent->m_eventNumber ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	if( ! XDR_TESTBIT( pDevice->write<int32_t>( & pGenericEvent->m_runNumber ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	if( ! XDR_TESTBIT( pDevice->write<int64_t>( & pGenericEvent->m_timeStamp ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	if( ! XDR_TESTBIT( pDevice->write( & pGenericEvent->m_detectorName ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	if( ! XDR_TESTBIT( pDevice->write( & pGenericEvent->m_description ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	// write event contents
	const DQMGenericEvent::IntVectorMap &intVals(pGenericEvent->m_intValues);
	if( ! XDR_TESTBIT( DQMStreamingHelper::write( pDevice , intVals ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	if( ! XDR_TESTBIT( DQMStreamingHelper::write( pDevice , pGenericEvent->m_floatValues ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	if( ! XDR_TESTBIT( DQMStreamingHelper::write( pDevice , pGenericEvent->m_doubleValues ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	if( ! XDR_TESTBIT( DQMStreamingHelper::write( pDevice , pGenericEvent->m_stringValues ) , xdrstream::XDR_SUCCESS ) )
		return STATUS_CODE_FAILURE;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMGenericEventStreamer::read(DQMEvent *&pEvent, xdrstream::IODevice *pDevice)
{
	pEvent = NULL;

	DQMGenericEvent *pGenericEvent = new DQMGenericEvent();
	DQMGenericEventBase *pGenericEventBase = new DQMGenericEventBase();
	pGenericEventBase->setEvent(pGenericEvent);

	try
	{
		// write event info
		if( ! XDR_TESTBIT( pDevice->read<int32_t>( & pGenericEvent->m_eventNumber ) , xdrstream::XDR_SUCCESS ) )
			throw StatusCodeException(STATUS_CODE_FAILURE);

		if( ! XDR_TESTBIT( pDevice->read<int32_t>( & pGenericEvent->m_runNumber ) , xdrstream::XDR_SUCCESS ) )
			throw StatusCodeException(STATUS_CODE_FAILURE);

		if( ! XDR_TESTBIT( pDevice->read<int64_t>( & pGenericEvent->m_timeStamp ) , xdrstream::XDR_SUCCESS ) )
			throw StatusCodeException(STATUS_CODE_FAILURE);

		if( ! XDR_TESTBIT( pDevice->read( & pGenericEvent->m_detectorName ) , xdrstream::XDR_SUCCESS ) )
			throw StatusCodeException(STATUS_CODE_FAILURE);

		if( ! XDR_TESTBIT( pDevice->read( & pGenericEvent->m_description ) , xdrstream::XDR_SUCCESS ) )
			throw StatusCodeException(STATUS_CODE_FAILURE);

		// write event contents
		if( ! XDR_TESTBIT( DQMStreamingHelper::read( pDevice , pGenericEvent->m_intValues ) , xdrstream::XDR_SUCCESS ) )
			throw StatusCodeException(STATUS_CODE_FAILURE);

		if( ! XDR_TESTBIT( DQMStreamingHelper::read( pDevice , pGenericEvent->m_floatValues ) , xdrstream::XDR_SUCCESS ) )
			throw StatusCodeException(STATUS_CODE_FAILURE);

		if( ! XDR_TESTBIT( DQMStreamingHelper::read( pDevice , pGenericEvent->m_doubleValues ) , xdrstream::XDR_SUCCESS ) )
			throw StatusCodeException(STATUS_CODE_FAILURE);
	}
	catch(StatusCodeException &exception)
	{
		if( ! pGenericEventBase->isOwner() )
			delete pGenericEvent;

		delete pGenericEventBase;

		return STATUS_CODE_FAILURE;
	}

	pEvent = pGenericEventBase;

	return STATUS_CODE_SUCCESS;
}

//-------------------------------------------------------------------------------------------------

StatusCode DQMGenericEventStreamer::write(const DQMEvent *const pEvent, const std::string &subEventIdentifier, xdrstream::IODevice *pDevice)
{
	(void)subEventIdentifier;
	return this->write(pEvent, pDevice);
}

} 

